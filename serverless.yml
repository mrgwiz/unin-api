org: ptensor
app: unin-api
service: unin-api
frameworkVersion: '2 || 3'

custom:
  tableName: 'items-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: '20201221'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: '*'

functions:
  api:
    handler: handler.handler
    environment:
      ITEMS_TABLE: ${self:custom.tableName}
      CONTRACT: ${param:CONTRACT}
      WEB3_PROVIDER: ${param:WEB3_PROVIDER}
    events:
      - http:
          method: 'GET'
          path: "/items/owner/{owner}"
          cors: true
      - http:
          method: 'GET'
          path: "/items/{id}"
          cors: true
      - http:
          method: 'POST'
          path: "/items/claim/{id}"
          cors: true
      - http:
          method: 'POST'
          path: "/items/{id}"
          cors: true

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: wallet
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: wallet-index
            KeySchema:
              - AttributeName: wallet
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}

plugins:
  - serverless-offline
  - serverless-offline-dotenv